{
	"info": {
		"_postman_id": "e5451b6c-e1cc-4645-a322-d7941a3ba60c",
		"name": "API-Marketplace-Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fc4dc61-4a3d-465e-acc0-dbc722e6f913",
								"exec": [
									"",
									"pm.test(\"Get Token From Login\", function () {",
									"    var jsonData = pm.response.json();",
									"    // pm.expect(jsonData.data.access_token).to.eq(\"\");",
									"    pm.globals.set(\"marketplaceToken\", jsonData.access_token);",
									"    pm.globals.set(\"kalcareApiToken\", jsonData.access_token);",
									"});",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,202]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "mzaenalm@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Info Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9cfd33c-7461-4784-b744-e35e3bd43782",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"console.log(jsonData.data);",
									"    pm.response.to.have.status(200);",
									"    pm.test(\"id\", function () {",
									"    pm.expect(jsonData.data.id).to.eql(1);})",
									"    pm.test(\"email\", function () {",
									"    pm.expect(jsonData.data.email).to.eql('mzaenalm@gmail.com');})",
									"    pm.test(\"name\", function () {",
									"    pm.expect(jsonData.data.name).to.eql('mzaenalm');})",
									"    pm.test(\"status\", function () {",
									"    pm.expect(jsonData.data.status).to.eql(true);})",
									"    pm.test(\"preferences\", function () {",
									"    pm.expect(jsonData.data.preferences).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/info",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"info"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Store",
			"item": [
				{
					"name": "Store - All",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0591a0b-18d0-4c9b-8b62-b6de5cc46536",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"console.log(jsonData.data);",
									"    ",
									"tests[\"Response of data should be an array\"] = Array.isArray(jsonData['data']);",
									"// tests[\"data.links : Response should be an array\"] = Array.isArray(jsonData.data[0]['links']);",
									"",
									"pm.test(\"Test attribute & type data (id , store_code & store_name)\", () => {",
									"    _.each(jsonData.data, (item) => {",
									"        pm.expect(item.id).to.be.a('number');",
									"        pm.expect(item.store_code).to.be.a('string');",
									"        pm.expect(item.store_name).to.be.a('string');",
									"        pm.expect(item.links[0].rel).to.be.a('string');",
									"        pm.expect(item.links[0].uri).to.be.a('string');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/channel/stores?q=(status:1)&fields=(store_code,store_name)&limit=100&page=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"channel",
								"stores"
							],
							"query": [
								{
									"key": "q",
									"value": "(status:1)"
								},
								{
									"key": "fields",
									"value": "(store_code,store_name)"
								},
								{
									"key": "limit",
									"value": "100"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						},
						"description": "SELECT id, store_code, store_name, status, created_at, updated_at, deleted_at\r\n\tFROM public.store;"
					},
					"response": []
				},
				{
					"name": "Store - Create One",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4d0a001e-0ff5-47cd-99f5-8de9437b9d21",
								"exec": [
									"// var QA = {\r",
									"// \t\"store_code\": \"QATEST\", \r",
									"// \t\"store_name\": \"TESTING\", \r",
									"// \t\"status\": 1\r",
									"// }\r",
									"\r",
									"// pm.globals.set('QA', JSON.stringify(QA));\r",
									"\r",
									"\r",
									"\r",
									"pm.globals.set(\"store_code\", \"QATEST\");\r",
									"pm.globals.set(\"store_name\", \"TESTING\");\r",
									"pm.globals.set(\"status\", true);\r",
									"\r",
									"// if (pm.globals.get(\"store_code\").toLowerCase() === pm.globals.get(\"store_code\").toLowerCase()) {\r",
									"//     console.error(\"Entity values do not match\");\r",
									"//     throw new Error(\"Entity values do not match\");\r",
									"// }\r",
									"\r",
									"// if (pm.globals.get(\"store_code\") !== pm.globals.get(\"store_code\")){\r",
									"//     console.error(\"Store_code sudah exist\");\r",
									"//     throw new Error(\"Store_code sudah exist\");\r",
									"// }\r",
									"\r",
									"// var url = pm.variables.get(\"baseUrl\")+\"/channel/stores?q=(store_code:QATEST)&fields=(store_code,store_name)&limit=1&page=1\";\r",
									"// console.log(\"url: \"+url);\r",
									"// pm.sendRequest(url, function (error, response){\r",
									"//     if(error){\r",
									"//         console.log(\"Error: \"+error);\r",
									"//     }else{\r",
									"//         pm.expect(response).to.have.property('code', 200);\r",
									"//         getResponse = response.json();\r",
									"//     }});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "76978c2f-bb07-4d69-b97d-d18658691937",
								"exec": [
									"pm.test(\"Status created | code must be one of 201,202\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Compare value | store_code \", function () {",
									"    pm.expect(jsonData.data.store_code).to.eql(pm.globals.get(\"store_code\"));",
									"});",
									"pm.test(\"Compare value | store_name \", function () {",
									"    pm.expect(jsonData.data.store_name).to.eql(pm.globals.get(\"store_name\"));",
									"});",
									"pm.test(\"Compare value | status \", function () {",
									"    pm.expect(jsonData.data.status).to.eql(pm.globals.get(\"status\"));",
									"});",
									"",
									"var store_id = jsonData.data.id;",
									"pm.globals.set(\"store-id\", store_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"store_code\": \"{{store_code}}\", \n\t\"store_name\": \"{{store_name}}\", \n\t\"status\": {{status}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/channel/store",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"channel",
								"store"
							]
						}
					},
					"response": []
				},
				{
					"name": "Store - By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6eb76692-8b5c-47ff-beb7-45ea56d46b98",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"    pm.test(\"ID\", function () {",
									"    pm.expect(jsonData.data.id).to.eql(pm.globals.get(\"store-id\"))});",
									"    pm.test(\"Store Code\", function () {",
									"    pm.expect(jsonData.data.store_code).to.eql(",
									"    pm.globals.get(\"store_code\"))});",
									"    pm.test(\"Store Name\", function () {",
									"    pm.expect(jsonData.data.store_name).to.eql(pm.globals.get(\"store_name\"))});",
									"    ",
									"console.log(jsonData);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a2e289c9-d4a7-4927-9fb5-b7338fd7434b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/channel/store/{{store-id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"channel",
								"store",
								"{{store-id}}"
							]
						},
						"description": "SELECT * FROM public.store where id=193;"
					},
					"response": []
				},
				{
					"name": "Store - by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa511eb9-dbdb-4f51-9f73-861ed6b4f9cc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);});",
									"",
									"pm.test(\"Delete data store\", function () {",
									"    pm.expect(pm.response.text()).to.include('OK');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "",
								"description": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/channel/store/{{store-id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"channel",
								"store",
								"{{store-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Store - By ID (Verify data has deleted)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6eb76692-8b5c-47ff-beb7-45ea56d46b98",
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);});",
									"",
									"pm.test(\"Verify data has deleted !\", function () {",
									"    pm.expect(pm.response.json()).to.eql('Not Found');",
									"});",
									"",
									"pm.globals.unset(\"store-id\");",
									"pm.globals.unset(\"store_code\");",
									"pm.globals.unset(\"store_name\");",
									"pm.globals.unset(\"status\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a2e289c9-d4a7-4927-9fb5-b7338fd7434b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/channel/store/{{store-id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"channel",
								"store",
								"{{store-id}}"
							]
						},
						"description": "SELECT * FROM public.store where id=193;"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "85561d2f-a512-483a-88ed-cf8645342b68",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "65c1866f-ec9d-446f-a9de-8d0c902849d3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Catalog",
			"item": [
				{
					"name": "Product",
					"item": [
						{
							"name": "Product - By Category ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2c92c7f-1844-4f7c-89bf-2f258e0764a5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);});",
											"",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Test attribute data Body.data[])\", () => {",
											"    _.each(jsonData.data, (item) => {",
											"    pm.expect(item).to.have.property('id');",
											"    pm.expect(item).to.have.property('sku');",
											"    pm.expect(item).to.have.property('name');",
											"    pm.expect(item).to.have.property('slug');",
											"    // pm.expect(item).to.have.property('brand');",
											"    // pm.expect(item.brand).to.have.property('code');",
											"    // pm.expect(item.brand).to.have.property('name');",
											"    pm.expect(item.prices).to.have.property('sellingPrice');",
											"    pm.expect(item.prices).to.have.property('specialPrice');",
											"    // pm.expect(item).to.have.property('categories');",
											"    // pm.expect(item.categories).to.have.property('category');",
											"    // pm.expect(item.categories.category).to.have.property('id');",
											"    // pm.expect(item.categories.category).to.have.property('name');",
											"    // pm.expect(item).to.have.property('images');",
											"    pm.expect(item.images).to.have.property('thumbnail');",
											"    pm.expect(item.images).to.have.property('default');",
											"    pm.expect(item.images).to.have.property('original');",
											"    // pm.expect(item).to.have.property('metaTitle');",
											"    // pm.expect(item).to.have.property('metaDescription');",
											"    // pm.expect(item).to.have.property('metaKeyword');",
											"    // pm.expect(item).to.have.property('shortDescription');",
											"    // pm.expect(item).to.have.property('weight');",
											"    // pm.expect(item).to.have.property('basePoint');",
											"    // pm.expect(item).to.have.property('basePointRupiah');",
											"    // pm.expect(item).to.have.property('status');",
											"    // pm.expect(item).to.have.property('links');",
											"    // pm.expect(item.links[0]).to.have.property('rel');",
											"    // pm.expect(item.links[0]).to.have.property('uri');",
											"    });",
											"});",
											"",
											"pm.test(\"Test type data Body.data[]\", () => {",
											"    _.each(jsonData.data, (item) => {",
											"        pm.expect(item.id).to.be.a('number');",
											"        pm.expect(item.sku).to.be.a('string');",
											"        pm.expect(item.name).to.be.a('string');",
											"        pm.expect(item.slug).to.be.a('string');",
											"        // pm.expect(item.brand.code).to.be.a('string')",
											"        // pm.expect(item.brand.name).to.be.a('string')",
											"        pm.expect(item.prices.sellingPrice).to.be.a('number')",
											"        pm.expect(item.prices.specialPrice).to.be.a('number')",
											"        // pm.expect(item.categories.category.id).to.be.a('number')",
											"        // pm.expect(item.categories.category.name).to.be.a('string')",
											"        pm.expect(item.images.thumbnail).to.be.a('string')",
											"        pm.expect(item.images.default).to.be.a('string')",
											"        pm.expect(item.images.original).to.be.a('string')",
											"        // pm.expect(item.metaTitle).to.be.a('string')",
											"        // pm.expect(item.metaDescription).to.be.a('string')",
											"        // pm.expect(item.metaKeyword).to.be.a('string')",
											"        // pm.expect(item.shortDescription).to.be.a('string')",
											"        // pm.expect(item.weight).to.be.a('number')",
											"        // pm.expect(item.basePoint).to.be.a('number')",
											"        // pm.expect(item.basePointRupiah).to.be.a('number')",
											"        // pm.expect(item.status).to.be.true",
											"        // pm.expect(item.links[0].rel).to.be.a('string')",
											"        // pm.expect(item.links[0].uri).to.be.a('string')",
											"    })",
											"});",
											"console.log(jsonData.data);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/catalog/productByCategory/10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"catalog",
										"productByCategory",
										"10"
									]
								},
								"description": "SELECT p_.id, p_.sku, p_.name, p_.slug, b_.brand_code, b_.brand_name, c_.id, c_.name,\r\npi.image_thumbnail, pi.image, pi.image_original, p_.meta_title, p_.meta_description, \r\np_.meta_keyword, p_.short_description, p_.weight, p_.base_point, p_.base_point_rupiah, \r\np_.status\r\nFROM\r\nproduct_category pc\r\nRIGHT JOIN\r\ncategory c_ on pc.category_id = c_.id\r\nLEFT JOIN\r\nproduct p_ on pc.product_id = p_.id\r\nLEFT JOIN\r\nproduct_image pi on pc.product_id = pi.product_id\r\nINNER JOIN\r\nbrand b_ on p_.brand_code = b_.brand_code\r\nWHERE\r\npc.category_id = 1"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{marketplaceToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "91af23bf-6087-442e-818a-0b58bfeb9bdd",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b9f5fdb5-4240-44f4-9185-af9f288b815c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "da3fec5d-7ffd-4d61-9846-2569c9d0867c",
			"key": "baseUrl",
			"value": "https://kalcare-api.karsalintasbuwana.com",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}